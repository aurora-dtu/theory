import Mathlib.Algebra.Tropical.Basic
import Mathlib.Computability.Language
import Mathlib.Data.ENat.Lattice
import Mathlib.Data.EReal.Basic
import Mathlib.Order.OmegaCompletePartialOrder
import WGCL.WeakestPre
import WGCL.Park

namespace WGCL

section General

variable [OmegaCompletePartialOrder W] [OrderBot W]
variable [Semiring W]
variable [AddLeftMono W] [MulLeftMono W]

open scoped Classical in
example [SupSet W] (h : (0 : W) ‚â§ 1) :
    wp[‚Ñï,W,W,Var]‚ü¶if (~(¬∑ x < 2)) { ‚äô 1 } else { ‚äô 2 }‚üß(1) ‚â§ wght {2} := by
  intro œÉ
  simp [wGCL.wp, Subst.subst, BExpr.iver, BExpr.not]
  if h' : œÉ x < 2 then
    simp_all [Nat.not_le_of_lt]
    rw [‚Üê one_add_one_eq_two]
    refine le_add_of_nonneg_left h
  else
    simp_all [Nat.not_lt.mpr]

end General

section Boolean

/-- `Boolean`s are `Bool`s where `b‚ÇÅ + b‚ÇÇ = b‚ÇÅ ‚à® b‚ÇÇ` rather than `b‚ÇÅ ^^ b‚ÇÇ`. -/
def Boolean := Bool

instance : PartialOrder Boolean := inferInstanceAs (PartialOrder Bool)
instance : OrderBot Boolean := inferInstanceAs (OrderBot Bool)
instance : OrderTop Boolean := inferInstanceAs (OrderTop Bool)

open scoped Classical in
noncomputable instance : OmegaCompletePartialOrder Boolean where
  œâSup C := if ‚àÉ n, C n = ‚ä§ then ‚ä§ else ‚ä•
  le_œâSup C n := by
    split_ifs with h
    ¬∑ simp_all
    ¬∑ simp_all
      have := h n
      exact not_bot_lt_iff.mp (h n)
  œâSup_le C n h := by
    split_ifs with h'
    ¬∑ obtain ‚ü®n', h'‚ü© := h'
      simp_all
      have := h n'
      simp_all
    ¬∑ simp_all

instance : Add Boolean := ‚ü®fun a b ‚Ü¶ a || b‚ü©
instance : Mul Boolean := ‚ü®fun a b ‚Ü¶ a && b‚ü©
instance : Zero Boolean := ‚ü®‚ä•‚ü©

@[simp] theorem Boolean.add_eq_inf (a b : Boolean) : a + b = (a || b) := rfl
@[simp] theorem Boolean.mul_eq_add (a b : Boolean) : a * b = (a && b) := rfl
@[simp] theorem Boolean.bot_or (a : Boolean) : (‚ä• || a) = a := rfl
@[simp] theorem Boolean.or_bot (a : Boolean) : (a || ‚ä•) = a := by rw [Bool.or_comm]; rfl
@[simp] theorem Boolean.bot_le (a : Boolean) : ‚ä• ‚â§ a := OrderBot.bot_le a
@[simp] theorem Boolean.le_top (a : Boolean) : a ‚â§ ‚ä§ := OrderTop.le_top a
@[simp] theorem Boolean.zero_eq_bot : (0 : Boolean) = ‚ä• := rfl

instance : Semiring Boolean where
  add_assoc a b c := by simp [Bool.or_assoc]
  zero_add := by simp; exact Boolean.bot_or
  add_zero := by simp; exact Boolean.or_bot
  nsmul n x := if n = 0 then ‚ä• else x
  add_comm := by simp [Bool.or_comm]
  left_distrib := by simp [Bool.and_or_distrib_left]
  right_distrib := by simp [Bool.and_or_distrib_right]
  zero_mul _ := by rfl
  mul_zero _ := by simp; rw [Bool.and_comm]; rfl
  mul_assoc := by simp [Bool.and_assoc]
  one := ‚ä§
  one_mul _ := by simp; exact rfl
  mul_one _ := by simp; exact Bool.and_true _
  nsmul_zero := by simp
  nsmul_succ n _ := by split_ifs <;> simp_all; exact Bool.false_or _ |>.symm

instance : AddLeftMono Boolean := ‚ü®fun b‚ÇÅ b‚ÇÇ b‚ÇÉ h h' ‚Ü¶ by
  simp_all [LE.le]; exact Or.imp_right h h'‚ü©
instance : MulLeftMono Boolean := ‚ü®fun b‚ÇÅ b‚ÇÇ b‚ÇÉ h ‚Ü¶ by simp_all [LE.le]‚ü©

open scoped Classical in
/- **Verification/Debugging** via the **Boolean semiring** -/
example : wp[‚Ñï,Boolean,Boolean,String]‚ü¶{‚äô1} ‚äï {‚äô0}‚üß(1) = wght {1} := by
  simp [wGCL.wp]

end Boolean

section Combinatorics

open scoped Classical in
/- **Combinatorics** via the (extended) **Natural Numbers semiring** -/
example : wp[‚Ñï,‚Ñï‚àû,‚Ñï‚àû,String]‚ü¶{‚äô3} ‚äï {‚äô4}‚üß(1) = wght {7} := by
  simp [wGCL.wp]
  norm_cast

open scoped Classical in
/- **Combinatorics** via the (extended) **Natural Numbers semiring** -/
example : wp[‚Ñï,‚Ñï‚àû,‚Ñï‚àû,String]‚ü¶x := 1; {‚äô x} ‚äï {‚äô2}‚üß(1) = wght {3} := by
  simp [wGCL.wp, Subst.subst]
  norm_cast

end Combinatorics

noncomputable section ENat

/-- A version of ‚Ñï‚àû where `a + b = a ‚äì b` and `a * b = a + b`. -/
def ENat' := ‚Ñï‚àû

instance : PartialOrder ENat' := inferInstanceAs (PartialOrder ‚Ñï‚àû)
instance : OrderBot ENat' := inferInstanceAs (OrderBot ‚Ñï‚àû)
instance : OrderTop ENat' := inferInstanceAs (OrderTop ‚Ñï‚àû)
instance : OmegaCompletePartialOrder ENat' := inferInstanceAs (OmegaCompletePartialOrder ‚Ñï‚àû)
instance : Min ENat' := inferInstanceAs (Min ‚Ñï‚àû)

instance : Add ENat' := ‚ü®fun a b ‚Ü¶ a ‚äì b‚ü©
instance : Mul ENat' := ‚ü®fun a b ‚Ü¶
  let a' : ‚Ñï‚àû := a
  let b' : ‚Ñï‚àû := b
  a' + b'‚ü©
instance : Zero ENat' := ‚ü®‚ä§‚ü©
instance : One ENat' := ‚ü®‚ä•‚ü©

@[simp] theorem ENat'.add_eq_inf (a b : ENat') : a + b = (a ‚äì b) := rfl
@[simp] theorem ENat'.mul_eq_add (a b : ENat') : a * b =
  let a' : ‚Ñï‚àû := a
  let b' : ‚Ñï‚àû := b
  a' + b' := rfl
@[simp] theorem ENat'.bot_le (a : ENat') : ‚ä• ‚â§ a := OrderBot.bot_le a
@[simp] theorem ENat'.le_top (a : ENat') : a ‚â§ ‚ä§ := OrderTop.le_top a
@[simp] theorem ENat'.zero_eq_top : (0 : ENat') = ‚ä§ := rfl
@[simp] theorem ENat'.one_eq_zero : (1 : ENat') = (0 : ‚Ñï‚àû) := rfl

instance : Semiring ENat' where
  add_assoc a b c := by simp [inf_assoc]
  zero_add := by simp
  add_zero := by simp
  nsmul n x := if n = 0 then ‚ä§ else x
  add_comm := by simp [inf_comm]
  left_distrib a b c := by simp [add_min]
  right_distrib := by simp [min_add]
  zero_mul _ := by rfl
  mul_zero _ := by simp
  mul_assoc := by simp [add_assoc]
  one_mul _ := by simp
  mul_one _ := by simp
  nsmul_zero := by simp
  nsmul_succ n := by simp; split_ifs <;> simp_all

instance : AddLeftMono ENat' := ‚ü®fun b‚ÇÅ b‚ÇÇ b‚ÇÉ h n ‚Ü¶ by
  simp_all; intro h''
  have : (none : ‚Ñï‚àû) = (‚ä§ : ‚Ñï‚àû) := rfl
  if b‚ÇÅ = ‚ä§ then
    subst_eqs
    simp_all
    rcases b‚ÇÇ with _ | b‚ÇÇ <;> try simp_all
    ¬∑ exact h n rfl
    ¬∑ exact h n rfl
  else
    rcases b‚ÇÇ with _ | b‚ÇÇ <;> rcases b‚ÇÅ with _ | b‚ÇÅ <;> rcases b‚ÇÉ with _ | b‚ÇÉ <;> simp_all
    ¬∑ have : b‚ÇÅ = n := ENat.coe_inj.mp h''
      subst_eqs
      exists n ‚äì b‚ÇÇ
      simp_all
      rfl
    ¬∑ suffices n = b‚ÇÅ ‚äì b‚ÇÉ by
        simp_all
        subst_eqs
        exists b‚ÇÅ ‚äì b‚ÇÇ ‚äì b‚ÇÉ
        simp_all
        have : b‚ÇÇ ‚â§ b‚ÇÉ := ENat.coe_le_coe.mp h
        have : b‚ÇÇ ‚äì b‚ÇÉ = b‚ÇÇ := by simp_all
        simp_all
        rfl
      refine ENat.coe_inj.mp ?_
      symm at h''
      simp_all
      rfl‚ü©
instance : MulLeftMono ENat' := ‚ü®fun b‚ÇÅ b‚ÇÇ b‚ÇÉ h ‚Ü¶ by
  simp_all
  have : ‚àÄ {b‚ÇÅ b‚ÇÇ b‚ÇÉ : ‚Ñï‚àû} (h : b‚ÇÇ ‚â§ b‚ÇÉ), b‚ÇÅ + b‚ÇÇ ‚â§ b‚ÇÅ + b‚ÇÉ := fun h ‚Ü¶ add_le_add_left h _
  apply this h‚ü©

open scoped Classical in
/- **Combinatorics** via the (extended) **Natural Numbers semiring** -/
example : wp[‚Ñï,ENat',ENat',String]‚ü¶x := 1; {‚äô x} ‚äï {‚äô2}‚üß(1) = wght {3} := by
  simp [wGCL.wp, Subst.subst]
  norm_cast

end ENat

section Bottleneck

def Bottleneck := EReal

noncomputable instance : LinearOrder Bottleneck := inferInstanceAs (LinearOrder EReal)
noncomputable instance : CompleteLattice Bottleneck := inferInstanceAs (CompleteLattice EReal)
noncomputable instance : OmegaCompletePartialOrder Bottleneck :=
  inferInstanceAs (OmegaCompletePartialOrder EReal)
noncomputable instance : OrderBot Bottleneck := inferInstanceAs (OrderBot EReal)
noncomputable instance : OrderTop Bottleneck := inferInstanceAs (OrderTop EReal)

noncomputable instance : Add Bottleneck := ‚ü®fun a b ‚Ü¶ a ‚äî b‚ü©
noncomputable instance : Mul Bottleneck := ‚ü®fun a b ‚Ü¶ a ‚äì b‚ü©
noncomputable instance : Zero Bottleneck := ‚ü®‚ä•‚ü©

@[simp] theorem Bottleneck.add_eq_inf (a b : Bottleneck) : a + b = a ‚äî b := rfl
@[simp] theorem Bottleneck.mul_eq_add (a b : Bottleneck) : a * b = a ‚äì b := rfl
@[simp] theorem Bottleneck.bot_le (a : Bottleneck) : ‚ä• ‚â§ a := OrderBot.bot_le a
@[simp] theorem Bottleneck.le_top (a : Bottleneck) : a ‚â§ ‚ä§ := OrderTop.le_top a
@[simp] theorem Bottleneck.zero_eq_bot : (0 : Bottleneck) = ‚ä• := rfl

noncomputable instance : Semiring Bottleneck where
  add_assoc a b c := max_assoc a b c
  zero_add := by simp
  add_zero := by simp
  nsmul n x := if n = 0 then ‚ä• else x
  add_comm := by simp [max_comm]
  left_distrib := by simp [inf_sup_left]
  right_distrib := by simp [inf_sup_right]
  zero_mul := by simp
  mul_zero := by simp
  mul_assoc := by simp [min_assoc]
  one := ‚ä§
  one_mul := by simp; exact fun _ ‚Ü¶ le_top
  mul_one := by simp; exact fun _ ‚Ü¶ le_top
  nsmul_zero := by simp
  nsmul_succ n := by split_ifs <;> simp_all

instance : AddLeftMono Bottleneck := ‚ü®fun a b c h ‚Ü¶ by simp_all; exact LE.le.le_or_le h a‚ü©
instance : MulLeftMono Bottleneck := ‚ü®fun a b c h ‚Ü¶ by simp_all‚ü©

/- **Optimization** via the **Bottleneck semiring** -/
open scoped Classical in
example :
    wp[‚Ñï,Bottleneck,Bottleneck,Var]‚ü¶if (~(¬∑ x < 2)) { ‚äô 1 } else { ‚äô 2 }‚üß(1) ‚â§ wght {2} := by
  intro œÉ
  simp [wGCL.wp, Subst.subst, BExpr.iver, BExpr.not]
  if h' : œÉ x < 2 then simp_all [Nat.not_le_of_lt]; exact Preorder.le_refl 1
  else simp_all [Nat.not_lt.mpr]

end Bottleneck

section FormalLanguages

variable {Œì : Type}

attribute [local simp] HSMul.hSMul attribute [local simp] SMul.smul
attribute [local simp] HMul.hMul   attribute [local simp] Mul.mul
attribute [local simp] HAdd.hAdd   attribute [local simp] Add.add

abbrev Œµ : List Œì := []

scoped instance : Monoid (List Œì) where
  mul := List.append
  mul_assoc := List.append_assoc
  one := Œµ
  one_mul := by simp; rfl
  mul_one := by simp [HMul.hMul]; rfl

@[simp] theorem one_append {w : List Œì} : 1 ++ w = w := List.append_left_eq_self.mpr rfl

scoped instance : DistribMulAction (List Œì) (Language Œì) where
  smul w S := (w ++ ¬∑) '' S
  one_smul S := by ext w'; simp
  mul_smul w‚ÇÅ w‚ÇÇ S := by ext w; simp; rw [Set.mem_image, Set.mem_image]; simp
  smul_zero w := by simp; apply Set.image_empty
  smul_add w S‚ÇÅ S‚ÇÇ := by
    ext w'; simp; rw [Set.mem_image, Set.mem_union, Set.mem_image, Set.mem_image]; aesop

scoped instance : CovariantClass (List Œì) (Language Œì) HSMul.hSMul LE.le :=
  ‚ü®fun _ _ _ _ _ ‚Ü¶ by aesop‚ü©

@[simp] scoped instance : Coe (List Œì) (ùïé (List Œì) (Mem ‚Ñï Var)) := ‚ü®fun S _ ‚Ü¶ S‚ü©
@[simp] scoped instance : Singleton (List Œì) (Weighting ‚Ñï (Language Œì) Var) := ‚ü®fun S _ ‚Ü¶ {S}‚ü©
@[simp] scoped instance : Insert (List Œì) (Weighting ‚Ñï (Language Œì) Var) :=
  ‚ü®fun w S œÉ ‚Ü¶ insert w (S œÉ)‚ü©

@[simp] theorem Language.mem_singleton_iff : a ‚àà ({b} : Language Œì) ‚Üî a = b := Eq.to_iff rfl
@[simp] theorem Language.mem_insert_iff {S : Language Œì} : a ‚àà insert b S ‚Üî a = b ‚à® a ‚àà S :=
  Set.mem_insert_iff

/- **Model Checking** via the **Formal languages semiring** -/
open scoped Classical in
example {a b c d : Œì} :
    wp[‚Ñï,Language Œì,List Œì,Var]‚ü¶
      ‚äô ~[a] ;
      skip ;
      ‚äô ~[b] ;
      { ‚äô ~[c] } ‚äï { ‚äô ~[d] }
    ‚üß(~{Œµ}) = {[a,b,c], [a,b,d]} := by
  ext œÉ w; simp [wGCL.wp]; rw [Set.mem_image]; aesop

/- **Model Checking** via the **Formal languages semiring** -/
open scoped Classical in
example {a b c: Œì} :
    wp[‚Ñï,Language Œì,List Œì,Var]‚ü¶
      ‚äô ~[a] ;
      ‚äô ~(if ¬∑ x = 12 then [b] else [c])
    ‚üß(~{Œµ}) ‚â§ {[a,b], [a,c]} := by
  intro œÉ w; simp [wGCL.wp]
  intro w' h h'
  have := Language.mem_singleton_iff.mp h; subst_eqs
  split_ifs <;> simp_all [Language.mem_insert_iff.mpr]

end FormalLanguages

section Tropical

open OmegaCompletePartialOrder

open scoped Classical in
noncomputable instance : SupSet (Tropical ‚Ñï‚àû) where
  -- TODO: this is a bogus instance loosely based on the Real.instSupSet
  sSup S := if h : S.Nonempty ‚àß BddAbove S then h.right.choose else 0

/-- The set of upper bounds of a set. -/
def Chain.upperBounds [Preorder Œ±] (s : Chain Œ±) : Set Œ± :=
  { x | ‚àÄ ‚¶Éa‚¶Ñ, a ‚àà s ‚Üí a ‚â§ x }

/-- A set is bounded above if there exists an upper bound. -/
def Chain.BddAbove [Preorder Œ±] (s : Chain Œ±) :=
  (upperBounds s).Nonempty

def Chain.BddAbove_choose_spec [Preorder Œ±] {s : Chain Œ±} (h : Chain.BddAbove s) :
    ‚àÄ ‚¶Éa : Œ±‚¶Ñ, a ‚àà s ‚Üí a ‚â§ h.choose := h.choose_spec

instance : OrderBot (Tropical ‚Ñï‚àû) where
  bot := ‚ä§
  bot_le a := sorry

noncomputable instance : CompleteLinearOrder ‚Ñï‚àû := inferInstance
noncomputable instance : CompleteLattice ‚Ñï‚àû := inferInstance
noncomputable instance : PartialOrder (Tropical ‚Ñï‚àû) := inferInstance

open scoped Classical in
noncomputable instance : OmegaCompletePartialOrder (Tropical ‚Ñï‚àû) where
  œâSup S := if h : Chain.BddAbove S then h.choose else ‚ä§
  le_œâSup C n := by
    split_ifs with h
    ¬∑ apply Chain.BddAbove_choose_spec h
      simp [Chain.instMembership]
    ¬∑ simp_all
  œâSup_le C n h := by
    split_ifs with h'
    ¬∑ have := Chain.BddAbove_choose_spec h'
      simp_all
      sorry
    ¬∑ simp [Chain.BddAbove, Chain.upperBounds, Set.Nonempty] at h'
      have := h' n
      sorry

/- **Optimization** via the **Tropical semiring** -/
open scoped Classical in
example : wp[‚Ñï,Tropical ‚Ñï‚àû,Tropical ‚Ñï‚àû,Var]‚ü¶if (~(¬∑ x < 2)) {‚äô 1} else {‚äô 2}‚üß(1) ‚â§ wght {2} := by
  intro œÉ
  simp [wGCL.wp, Subst.subst, BExpr.iver, BExpr.not]
  if h : œÉ x < 2 then simp_all [Nat.not_le_of_lt]; norm_cast
  else simp_all [Nat.not_lt.mpr]

end Tropical

def SkiRental (n : Var) (y : Var) [‚àÄ n, OfNat W n] : wGCL ‚Ñï W Var := wgcl {
  while (~(0 < ¬∑ n)) {
    ~n := ~(¬∑ n - 1) ;
    {‚äô 1} ‚äï { ‚äô ~(OfNat.ofNat <| ¬∑ y); ~n := 0 }
  }
}

variable [DecidableEq Var]
variable [(B : BExpr ‚Ñï String) ‚Üí (œÉ : Mem ‚Ñï String) ‚Üí Decidable (B œÉ)]

@[simp] noncomputable instance {n : ‚Ñï} : OfNat ENat' n := ‚ü®n‚ü©

example :
    wp[‚Ñï,ENat',ENat',String]‚ü¶~(SkiRental n y)‚üß(1) ‚â§ fun œÉ ‚Ü¶ (œÉ n : ENat') + œÉ y := by
  simp [SkiRental]
  apply wGCL.wp_le_of_le
  intro œÉ
  simp [wGCL.Œ¶, BExpr.iver, BExpr.not, wGCL.wp, Subst.subst]
  split_ifs with h‚ÇÅ h‚ÇÇ h‚ÇÉ <;> subst_eqs <;> (try simp_all) <;> norm_cast
  ¬∑ left
    generalize h : œÉ n = m
    rw [h] at h‚ÇÉ
    rcases m with _ | m
    ¬∑ simp
    ¬∑ simp_all
      clear h
      sorry
  ¬∑ left; left; left
    sorry
  ¬∑ right
    sorry

end WGCL
