import Mathlib.Data.ENNReal.Inv
import Mathlib.Order.FixedPoints
import PGCL.pGCL
import MDP.Optimization

namespace pGCL

open OrderHom OmegaCompletePartialOrder
open scoped Optimization.Notation

variable {œñ : Type*} [DecidableEq œñ]

noncomputable def wp (O : Optimization) : pGCL œñ ‚Üí Exp œñ ‚Üío Exp œñ
  | pgcl {skip} => ‚ü®fun X ‚Ü¶ X, fun ‚¶É_ _‚¶Ñ a ‚Ü¶ a‚ü©
  | pgcl {~x := ~A} => ‚ü®fun X œÉ ‚Ü¶ X (œÉ[x ‚Ü¶ A œÉ]), fun ‚¶É_ _‚¶Ñ a i ‚Ü¶ a _‚ü©
  | pgcl {~C‚ÇÅ; ~C‚ÇÇ} => ‚ü®fun X ‚Ü¶ C‚ÇÅ.wp O (C‚ÇÇ.wp O X), fun a b h ‚Ü¶ (C‚ÇÅ.wp _).mono ((C‚ÇÇ.wp _).mono h)‚ü©
  | pgcl {{~C‚ÇÅ} [~p] {~C‚ÇÇ}} =>
    ‚ü®fun X ‚Ü¶ p.pick (C‚ÇÅ.wp O X) (C‚ÇÇ.wp O X),
     fun a b hab ‚Ü¶ by apply ProbExp.pick_le <;> apply (wp O _).mono hab‚ü©
  | pgcl {{~C‚ÇÅ}[]{~C‚ÇÇ}} =>
    ‚ü®O.opt‚ÇÇ (C‚ÇÅ.wp O) (C‚ÇÇ.wp O), fun a b hab ‚Ü¶ by simp only [Optimization.opt‚ÇÇ_apply]; gcongr‚ü©
  | pgcl {while ~b {~C'}} => ‚ü®fun X ‚Ü¶ lfp ‚ü®
      (b.iver * C'.wp O ¬∑ + b.not.iver * X),
      fun _ _ _ ‚Ü¶ by simp; gcongr‚ü©, fun _ _ _ ‚Ü¶ by simp; gcongr; intro; simp; gcongr‚ü©
  | pgcl {tick(~e)} => ‚ü®(e + ¬∑), fun _ _ h ‚Ü¶ by simp; gcongr‚ü©
  | pgcl {assert(~b)} => ‚ü®(i[b] * ¬∑), fun _ _ h ‚Ü¶ by simp; gcongr‚ü©

syntax "wp[" term "]‚ü¶" cpgcl_prog "‚üß" : term

macro_rules
| `(wp[$O]‚ü¶ $p ‚üß) => `(pGCL.wp $O pgcl {$p})

@[app_unexpander pGCL.wp]
def wpUnexpander : Lean.PrettyPrinter.Unexpander
| `($(_) $o $c) => do
    let c ‚Üê match c with | `(pgcl {$c}) => pure c | _ => `(cpgcl_prog| ~ $c)
    `(wp[$o]‚ü¶$c‚üß)
| _ => throw ()

noncomputable def Œ¶ (O : Optimization) (œÜ : BExpr œñ) [DecidablePred œÜ] (C' : pGCL œñ) (f : Exp œñ) :
    Exp œñ ‚Üío Exp œñ :=
  ‚ü®fun X ‚Ü¶ œÜ.iver * wp[O]‚ü¶~C'‚üß X + œÜ.not.iver * f, by intro _ _ _; simp; gcongr‚ü©

variable {O : Optimization}

theorem wp_loop (œÜ  : BExpr œñ) (C' : pGCL œñ) [DecidablePred œÜ] :
    wp[O]‚ü¶while ~œÜ{~C'}‚üß f = lfp (Œ¶ O œÜ C' f) := rfl

theorem wp_fp (œÜ : BExpr œñ) [DecidablePred œÜ] (C' : pGCL œñ) :
    (Œ¶ O œÜ C' f) (wp[O]‚ü¶while ~œÜ{~C'}‚üß f) = wp[O]‚ü¶while ~œÜ{~C'}‚üß f := by simp [wp_loop]

variable {x : œñ} {e : Exp œñ} {b : BExpr œñ} {C‚ÇÅ : pGCL œñ}

@[simp] theorem wp.skip : wp[O]‚ü¶skip‚üß = ‚ü®(¬∑), fun (_ _ : Exp œñ) a ‚Ü¶ a‚ü© := rfl
@[simp] theorem wp.assign :
    wp[O]‚ü¶~x := ~A‚üß = ‚ü®fun X œÉ ‚Ü¶ X (œÉ[x ‚Ü¶ A œÉ]), fun _ _ h _ ‚Ü¶ h _‚ü© := rfl
@[simp] theorem wp.seq : wp[O]‚ü¶~C‚ÇÅ ; ~C‚ÇÇ‚üß = OrderHom.comp (C‚ÇÅ.wp O) (C‚ÇÇ.wp O) := rfl
@[simp] theorem wp.prob :
    wp[O]‚ü¶{~C‚ÇÅ}[~p]{~C‚ÇÇ}‚üß = ‚ü®fun X ‚Ü¶ p.pick (C‚ÇÅ.wp O X) (C‚ÇÇ.wp O X), fun _ _ _ ‚Ü¶ by simp; gcongr‚ü©
:= rfl
@[simp] theorem wp.nonDet : wp[O]‚ü¶{~C‚ÇÅ}[]{~C‚ÇÇ}‚üß = O.opt‚ÇÇ (C‚ÇÅ.wp O) (C‚ÇÇ.wp O) := by ext; simp [wp]
@[simp] theorem wp.tick : wp[O]‚ü¶tick(~e)‚üß = ‚ü®fun X ‚Ü¶ e + X, fun _ _ _ ‚Ü¶ by simp; gcongr‚ü© := rfl
open scoped Classical in
@[simp] theorem wp.assert :
    wp[O]‚ü¶assert(~b)‚üß = ‚ü®fun X ‚Ü¶ b.iver * X, fun _ _ _ ‚Ü¶ by simp; gcongr‚ü© := rfl

noncomputable abbrev dwp : pGCL œñ ‚Üí Exp œñ ‚Üío Exp œñ := wp ùíü
noncomputable abbrev awp : pGCL œñ ‚Üí Exp œñ ‚Üío Exp œñ := wp ùíú

syntax "dwp‚ü¶" cpgcl_prog "‚üß" : term
syntax "awp‚ü¶" cpgcl_prog "‚üß" : term

macro_rules
| `(dwp‚ü¶ $p ‚üß) => `(pGCL.dwp pgcl {$p})
| `(awp‚ü¶ $p ‚üß) => `(pGCL.awp pgcl {$p})

@[app_unexpander pGCL.dwp]
def dwpUnexpander : Lean.PrettyPrinter.Unexpander
| `($(_) $c) => do
    let c ‚Üê match c with | `(pgcl {$c}) => pure c | _ => `(cpgcl_prog| ~ $c)
    `(dwp‚ü¶$c‚üß)
| _ => throw ()

@[app_unexpander pGCL.awp]
def awpUnexpander : Lean.PrettyPrinter.Unexpander
| `($(_) $c) => do
    let c ‚Üê match c with | `(pgcl {$c}) => pure c | _ => `(cpgcl_prog| ~ $c)
    `(awp‚ü¶$c‚üß)
| _ => throw ()

/-- Strip all `tick`s from a program. -/
def st : pGCL œñ ‚Üí pGCL œñ
  | pgcl {skip} => pgcl {skip}
  | pgcl {~x := ~A} => pgcl {~x := ~A}
  | pgcl {~C‚ÇÅ ; ~C‚ÇÇ} => pgcl {~C‚ÇÅ.st ; ~C‚ÇÇ.st}
  | pgcl {{~C‚ÇÅ} [~p] {~C‚ÇÇ}} => pgcl {{~C‚ÇÅ.st} [~p] {~C‚ÇÇ.st}}
  | pgcl {{~C‚ÇÅ} [] {~C‚ÇÇ}} => pgcl {{~C‚ÇÅ.st} [] {~C‚ÇÇ.st}}
  | pgcl {while ~b {~C'}} => pgcl {while ~b {~C'.st}}
  | pgcl {tick(~ _)} => pgcl {skip}
  | pgcl {assert(~ b)} => pgcl {assert(~b)}

def Œ¶.continuous [DecidablePred b] {C' : pGCL œñ} (ih : œâScottContinuous wp[O]‚ü¶~C'‚üß) :
    œâScottContinuous ‚áë(Œ¶ O b C' X) := by
  simp [œâScottContinuous_iff_map_œâSup_of_orderHom] at ih ‚ä¢
  intro c
  simp [Œ¶, œâSup] at ih ‚ä¢
  ext œÉ
  simp [ih, ENNReal.mul_iSup, ENNReal.iSup_add]

def wp.continuous (C : pGCL œñ) : œâScottContinuous (C.wp O) := by
  refine œâScottContinuous.of_map_œâSup_of_orderHom ?_
  simp [œâSup]
  induction C with (try simp; done)
  | seq C‚ÇÅ C‚ÇÇ ih‚ÇÅ ih‚ÇÇ =>
    intro c
    simp [ih‚ÇÇ]
    have : ‚àÄ i a, wp[O]‚ü¶~C‚ÇÇ‚üß (c i) a = c.map wp[O]‚ü¶~C‚ÇÇ‚üß i a := by simp
    simp only [this, ih‚ÇÅ]
    rfl
  | prob C‚ÇÅ p C‚ÇÇ ih‚ÇÅ ih‚ÇÇ =>
    simp [ProbExp.pick, -ProbExp.pick_of]
    intro C
    ext œÉ
    simp [-ProbExp.pick_of, ENNReal.mul_iSup, ih‚ÇÅ, ih‚ÇÇ]
    rw [ENNReal.iSup_add_iSup]
    simp
    intro i j; use i ‚äî j
    apply ProbExp.pick_le <;> gcongr <;> grind
  | nonDet C‚ÇÅ C‚ÇÇ ih‚ÇÅ ih‚ÇÇ =>
    simp
    simp [ih‚ÇÅ, ih‚ÇÇ]; clear ih‚ÇÅ ih‚ÇÇ
    intro c
    cases O <;> simp [Optimization.opt‚ÇÇ]
    ¬∑ ext
      simp
      simp [iSup_sup, sup_iSup]
      apply le_antisymm
      ¬∑ simp
        intro i j
        constructor
        ¬∑ apply le_iSup_of_le j; simp
        ¬∑ apply le_iSup_of_le i; simp
      ¬∑ simp
        intro i
        constructor <;> apply le_iSup‚ÇÇ_of_le i i <;> simp
    ¬∑ ext œÉ
      simp
      rw [iSup_inf_eq]
      simp [inf_iSup_eq]
      apply le_antisymm
      ¬∑ simp only [iSup_le_iff]
        intro i j
        apply le_iSup_of_le (i ‚äî j)
        gcongr <;> apply (wp _ _).mono <;> gcongr <;> omega
      ¬∑ simp only [iSup_le_iff]
        intro i
        apply le_iSup‚ÇÇ_of_le i i
        simp
  | loop b C' ih =>
    intro c
    simp [wp_loop]
    ext œÉ
    replace ih : œâScottContinuous ‚áëwp[O]‚ü¶~C'‚üß := by
      simpa [œâScottContinuous_iff_map_œâSup_of_orderHom]
    rw [fixedPoints.lfp_eq_sSup_iterate _ (Œ¶.continuous ih)]
    conv => right; arg 1; ext; rw [fixedPoints.lfp_eq_sSup_iterate _ (Œ¶.continuous ih)]
    simp
    rw [iSup_comm]
    congr with i
    suffices (‚áë(Œ¶ O b C' fun a ‚Ü¶ ‚®Ü i, c i a))^[i] ‚ä• = ‚®Ü i_1, (‚áë(Œ¶ O b C' (c i_1)))^[i] ‚ä• by
      have := congrFun this œÉ; simpa
    clear œÉ
    induction i with
    | zero => simp
    | succ i ih' =>
      simp only [Function.iterate_succ', Function.comp_apply]
      rw [ih']; clear ih'
      simp [Œ¶]
      ext œÉ
      simp
      rw [‚Üê ENNReal.iSup_add_iSup]
      ¬∑ simp [‚Üê ENNReal.mul_iSup]
        congr
        rw [œâScottContinuous_iff_map_œâSup_of_orderHom] at ih
        simp [œâSup] at ih
        specialize ih ‚ü®fun i_1 ‚Ü¶ ((fun X ‚Ü¶ i[b] * wp[O]‚ü¶~C'‚üß X + i[b.not] * c i_1)^[i] ‚ä•), _‚ü©
        ¬∑ intro a b hab œÉ; simp
          induction i generalizing œÉ with
          | zero => simp
          | succ i ih =>
            simp only [Function.iterate_succ', Function.comp_apply]
            simp
            gcongr
            ¬∑ apply (wp _ _).mono
              apply ih
            ¬∑ apply c.mono hab
        ¬∑ replace ih := congrFun ih œÉ
          simp only [DFunLike.coe] at ih
          simp at ih
          convert ih
          simp
      ¬∑ intro j k
        use j ‚äî k
        gcongr
        ¬∑ apply (wp _ _).mono fun X ‚Ü¶ ?_
          simp
          induction i generalizing X with
          | zero => simp
          | succ i ih =>
            simp only [Function.iterate_succ', Function.comp_apply]
            simp
            gcongr
            ¬∑ apply (wp _ _).mono
              apply ih
            ¬∑ apply c.mono; omega
        ¬∑ apply c.mono; omega
  | tick r => intro c; ext œÉ; simp [ENNReal.add_iSup]
  | assert r => intro c; ext œÉ; simp [wp, ENNReal.mul_iSup]

omit [DecidableEq œñ] in
theorem Exp.sub_sub_cancel {a b : Exp œñ} (h : ‚àÄ œÉ, a œÉ ‚â† ‚ä§) (h‚ÇÇ : b ‚â§ a) : a - (a - b) = b := by
  ext œÉ; apply ENNReal.sub_sub_cancel (h œÉ) (h‚ÇÇ œÉ)

theorem wp_le_one (C : pGCL œñ) (X : Exp œñ) (hX : X ‚â§ 1) : wp[O]‚ü¶~C.st‚üß X ‚â§ 1 := by
  induction C generalizing X with
  | skip => simp [st, hX]
  | assign => simp [st]; intro œÉ; apply hX
  | seq C‚ÇÅ C‚ÇÇ ih‚ÇÅ ih‚ÇÇ => apply ih‚ÇÅ _ (ih‚ÇÇ _ hX)
  | prob C‚ÇÅ p C‚ÇÇ ih‚ÇÅ ih‚ÇÇ =>
    simp [st]
    calc
      p.pick (wp[O]‚ü¶~C‚ÇÅ.st‚üß X) (wp[O]‚ü¶~C‚ÇÇ.st‚üß X) ‚â§ p.pick 1 1 := by
          gcongr <;> apply_assumption <;> exact hX
      _ ‚â§ 1 := by simp
  | nonDet C‚ÇÅ C‚ÇÇ ih‚ÇÅ ih‚ÇÇ =>
    simp [st]
    cases O
    ¬∑ simp [Optimization.opt‚ÇÇ]; exact ‚ü®ih‚ÇÅ X hX, ih‚ÇÇ X hX‚ü©
    ¬∑ simp [Optimization.opt‚ÇÇ]; exact inf_le_of_right_le (ih‚ÇÇ X hX)
  | tick => simp [st, hX]
  | assert b =>
    simp [st, wp]; intro œÉ; specialize hX œÉ; simp_all [BExpr.iver]; split_ifs <;> simp [hX]
  | loop b C' ih =>
    simp [st]
    apply lfp_le
    intro œÉ
    specialize hX œÉ
    simp_all [BExpr.iver, BExpr.not]
    split_ifs
    ¬∑ simp; apply ih; rfl
    ¬∑ simp; apply hX

omit [DecidableEq œñ] in
@[simp]
theorem ProbExp.one_sub_one_sub_apply {X : ProbExp œñ} : 1 - (1 - X œÉ) = X œÉ := by
  apply ENNReal.sub_sub_cancel <;> simp
omit [DecidableEq œñ] in
@[simp]
theorem ProbExp.one_sub_one_sub {X : ProbExp œñ} : 1 - (1 - X) = X := by
  ext; simp
omit [DecidableEq œñ] in
@[simp]
theorem ProbExp.one_sub_le {X : ProbExp œñ} : 1 - X.val ‚â§ 1 := by
  intro œÉ; simp

theorem wp_le_add (C : pGCL œñ) : wp[ùíü]‚ü¶~C.st‚üß X + wp[ùíü]‚ü¶~C.st‚üß Y ‚â§ wp[ùíü]‚ü¶~C.st‚üß (X + Y) := by
  induction C generalizing X Y with try simp [wp, st]; (try intro; simp [mul_add]; done); done
  | seq C‚ÇÅ C‚ÇÇ ih‚ÇÅ ih‚ÇÇ =>
    simp [st]
    grw [ih‚ÇÅ, ih‚ÇÇ]
  | loop b C' ih =>
    simp [st]
    simp [wp_loop]
    simp [fixedPoints.lfp_eq_sSup_iterate _ (Œ¶.continuous (wp.continuous C'.st))]
    intro œÉ
    simp
    rw [ENNReal.iSup_add_iSup]
    ¬∑ gcongr with n
      induction n generalizing œÉ with
      | zero => simp
      | succ n ihn =>
        simp only [Function.iterate_succ', Function.comp_apply]
        simp [Œ¶] at ihn ‚ä¢
        if hb : b œÉ then
          simp [hb]
          apply le_trans ih
          apply (wp _ _).mono
          intro œÉ'
          simp
          apply ihn
        else
          simp [hb]
    ¬∑ intro i j
      use i ‚äî j
      gcongr
      ¬∑ sorry
      ¬∑ sorry
  | nonDet C‚ÇÅ C‚ÇÇ ih‚ÇÅ ih‚ÇÇ =>
    simp [st, Optimization.opt‚ÇÇ]
    grw [‚Üê ih‚ÇÅ, ‚Üê ih‚ÇÇ]
    constructor <;> gcongr <;> simp
  | prob C‚ÇÅ p C‚ÇÇ ih‚ÇÅ ih‚ÇÇ =>
    simp [st]
    grw [‚Üê ih‚ÇÅ, ‚Üê ih‚ÇÇ]
    simp [ProbExp.pick]
    ring_nf; rfl

theorem wp_le_add_right (C : pGCL œñ) : wp[ùíü]‚ü¶~C.st‚üß (X + ((fun _ ‚Ü¶ Y) : Exp œñ)) ‚â§ wp[ùíü]‚ü¶~C.st‚üß X + (fun _ ‚Ü¶ Y) := by
  induction C generalizing X Y with try simp [wp, st]; (try intro; simp [mul_add]; done)
  | seq C‚ÇÅ C‚ÇÇ ih‚ÇÅ ih‚ÇÇ =>
    grw [‚Üê ih‚ÇÅ, ih‚ÇÇ]
  | loop b C' ih =>
    sorry
  | nonDet C‚ÇÅ C‚ÇÇ ih‚ÇÅ ih‚ÇÇ =>
    simp [Optimization.opt‚ÇÇ]
    grw [ih‚ÇÅ, ih‚ÇÇ]
    intro œÉ
    simp only [Pi.inf_apply, Pi.add_apply]
    rw [min_add]
  | prob C‚ÇÅ p C‚ÇÇ ih‚ÇÅ ih‚ÇÇ =>
    grw [ih‚ÇÅ, ih‚ÇÇ]
    simp [ProbExp.pick]
    ring_nf
    intro œÉ
    simp
    sorry
  | assert b =>
    simp [mul_add]; gcongr
    simp

omit [DecidableEq œñ] in
theorem lfp_le_gfp (f : Exp œñ ‚Üío Exp œñ) : lfp f ‚â§ gfp f := by
  apply le_gfp
  simp
omit [DecidableEq œñ] in
theorem lfp_le_gfp' (f g : Exp œñ ‚Üío Exp œñ) (h : f ‚â§ g) : lfp f ‚â§ gfp g := by
  apply le_trans (lfp_le_gfp _)
  gcongr
omit [DecidableEq œñ] in
theorem lfp_le_gfp'_apply (f g : Exp œñ ‚Üío Exp œñ) (h : f ‚â§ g) : lfp f œÉ ‚â§ gfp g œÉ := by
  apply le_trans (lfp_le_gfp _)
  gcongr

omit [DecidableEq œñ] in
theorem ProbExp.lfp_le_gfp (f : ProbExp œñ ‚Üío ProbExp œñ) : lfp f ‚â§ gfp f := by
  apply le_gfp
  simp
omit [DecidableEq œñ] in
theorem ProbExp.lfp_le_gfp' (f g : ProbExp œñ ‚Üío ProbExp œñ) (h : f ‚â§ g) : lfp f ‚â§ gfp g := by
  apply le_trans (lfp_le_gfp _)
  gcongr
omit [DecidableEq œñ] in
theorem ProbExp.lfp_le_gfp'_apply (f g : ProbExp œñ ‚Üío ProbExp œñ) (h : f ‚â§ g) :
    lfp f œÉ ‚â§ gfp g œÉ := by
  apply le_trans (lfp_le_gfp _)
  gcongr

end pGCL
