import Mathlib.Data.ENNReal.Inv
import Mathlib.Order.FixedPoints
import PGCL.pGCL
import MDP.Optimization

namespace pGCL

open OrderHom
open scoped Optimization.Notation

variable {œñ : Type*} [DecidableEq œñ]

noncomputable def wp (O : Optimization) : pGCL œñ ‚Üí Exp œñ ‚Üío Exp œñ
  | pgcl {skip} => ‚ü®fun X ‚Ü¶ X, fun ‚¶É_ _‚¶Ñ a ‚Ü¶ a‚ü©
  | pgcl {~x := ~A} => ‚ü®fun X œÉ ‚Ü¶ X (œÉ[x ‚Ü¶ A œÉ]), fun ‚¶É_ _‚¶Ñ a i ‚Ü¶ a _‚ü©
  | pgcl {~C‚ÇÅ; ~C‚ÇÇ} => ‚ü®fun X ‚Ü¶ C‚ÇÅ.wp O (C‚ÇÇ.wp O X), fun a b h ‚Ü¶ (C‚ÇÅ.wp _).mono ((C‚ÇÇ.wp _).mono h)‚ü©
  | pgcl {{~C‚ÇÅ} [~p] {~C‚ÇÇ}} =>
    ‚ü®fun X ‚Ü¶ p.pick (C‚ÇÅ.wp O X) (C‚ÇÇ.wp O X),
     fun a b hab ‚Ü¶ by apply ProbExp.pick_le <;> apply (wp O _).mono hab‚ü©
  | pgcl {{~C‚ÇÅ}[]{~C‚ÇÇ}} =>
    ‚ü®O.opt‚ÇÇ (C‚ÇÅ.wp O) (C‚ÇÇ.wp O), fun a b hab ‚Ü¶ by simp only [Optimization.opt‚ÇÇ_apply]; gcongr‚ü©
  | pgcl {while ~b {~C'}} => ‚ü®fun X ‚Ü¶ lfp ‚ü®
      (b.iver * C'.wp O ¬∑ + b.not.iver * X),
      fun _ _ _ ‚Ü¶ by simp; gcongr‚ü©, fun _ _ _ ‚Ü¶ by simp; gcongr; intro; simp; gcongr‚ü©
  | pgcl {tick(~e)} => ‚ü®(e + ¬∑), fun _ _ h ‚Ü¶ by simp; gcongr‚ü©
  | pgcl {assert(~b)} => ‚ü®(b.iver * ¬∑), fun _ _ h ‚Ü¶ by simp; gcongr‚ü©

syntax "wp[" term "]‚ü¶" cpgcl_prog "‚üß" : term

macro_rules
| `(wp[$O]‚ü¶ $p ‚üß) => `(pGCL.wp $O pgcl {$p})

@[app_unexpander pGCL.wp]
def wpUnexpander : Lean.PrettyPrinter.Unexpander
| `($(_) $o $c) => do
    let c ‚Üê match c with | `(pgcl {$c}) => pure c | _ => `(cpgcl_prog| ~ $c)
    `(wp[$o]‚ü¶$c‚üß)
| _ => throw ()

noncomputable def Œ¶ (O : Optimization) (œÜ : BExpr œñ) [DecidablePred œÜ] (C' : pGCL œñ) (f : Exp œñ) :
    Exp œñ ‚Üío Exp œñ :=
  ‚ü®fun X ‚Ü¶ œÜ.iver * wp[O]‚ü¶~C'‚üß X + œÜ.not.iver * f, by intro _ _ _; simp; gcongr‚ü©

variable {O : Optimization}

theorem wp_loop (œÜ  : BExpr œñ) (C' : pGCL œñ) [DecidablePred œÜ] :
    wp[O]‚ü¶while ~œÜ{~C'}‚üß f = lfp (Œ¶ O œÜ C' f) := rfl

theorem wp_fp (œÜ : BExpr œñ) [DecidablePred œÜ] (C' : pGCL œñ) :
    (Œ¶ O œÜ C' f) (wp[O]‚ü¶while ~œÜ{~C'}‚üß f) = wp[O]‚ü¶while ~œÜ{~C'}‚üß f := by simp [wp_loop]

variable {x : œñ} {e : Exp œñ} {b : BExpr œñ} {C‚ÇÅ : pGCL œñ}

@[simp] theorem wp.skip : wp[O]‚ü¶skip‚üß = ‚ü®(¬∑), fun (_ _ : Exp œñ) a ‚Ü¶ a‚ü© := rfl
@[simp] theorem wp.assign :
    wp[O]‚ü¶~x := ~A‚üß = ‚ü®fun X œÉ ‚Ü¶ X (œÉ[x ‚Ü¶ A œÉ]), fun _ _ h _ ‚Ü¶ h _‚ü© := rfl
@[simp] theorem wp.seq : wp[O]‚ü¶~C‚ÇÅ ; ~C‚ÇÇ‚üß = OrderHom.comp (C‚ÇÅ.wp O) (C‚ÇÇ.wp O) := rfl
@[simp] theorem wp.prob :
    wp[O]‚ü¶{~C‚ÇÅ}[~p]{~C‚ÇÇ}‚üß = ‚ü®fun X ‚Ü¶ p.pick (C‚ÇÅ.wp O X) (C‚ÇÇ.wp O X), fun _ _ _ ‚Ü¶ by simp; gcongr‚ü©
:= rfl
@[simp] theorem wp.nonDet : wp[O]‚ü¶{~C‚ÇÅ}[]{~C‚ÇÇ}‚üß = O.opt‚ÇÇ (C‚ÇÅ.wp O) (C‚ÇÇ.wp O) := by ext; simp [wp]
@[simp] theorem wp.tick : wp[O]‚ü¶tick(~e)‚üß = ‚ü®fun X ‚Ü¶ e + X, fun _ _ _ ‚Ü¶ by simp; gcongr‚ü© := rfl
open scoped Classical in
@[simp] theorem wp.assert :
    wp[O]‚ü¶assert(~b)‚üß = ‚ü®fun X ‚Ü¶ b.iver * X, fun _ _ _ ‚Ü¶ by simp; gcongr‚ü© := rfl

noncomputable abbrev dwp : pGCL œñ ‚Üí Exp œñ ‚Üío Exp œñ := wp ùíü
noncomputable abbrev awp : pGCL œñ ‚Üí Exp œñ ‚Üío Exp œñ := wp ùíú

syntax "dwp‚ü¶" cpgcl_prog "‚üß" : term
syntax "awp‚ü¶" cpgcl_prog "‚üß" : term

macro_rules
| `(dwp‚ü¶ $p ‚üß) => `(pGCL.dwp pgcl {$p})
| `(awp‚ü¶ $p ‚üß) => `(pGCL.awp pgcl {$p})

@[app_unexpander pGCL.dwp]
def dwpUnexpander : Lean.PrettyPrinter.Unexpander
| `($(_) $c) => do
    let c ‚Üê match c with | `(pgcl {$c}) => pure c | _ => `(cpgcl_prog| ~ $c)
    `(dwp‚ü¶$c‚üß)
| _ => throw ()

@[app_unexpander pGCL.awp]
def awpUnexpander : Lean.PrettyPrinter.Unexpander
| `($(_) $c) => do
    let c ‚Üê match c with | `(pgcl {$c}) => pure c | _ => `(cpgcl_prog| ~ $c)
    `(awp‚ü¶$c‚üß)
| _ => throw ()

end pGCL
