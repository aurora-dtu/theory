import Mathlib.Topology.Order.ScottTopology
import ProbNetKAT.Cantor

/-!

# Scott

This file defines the Scott-topology and its relation to the Cantor-topology.

## Main definitions

- `𝒪.scottTopology`: The Scott-topology.
- `𝒪`: The set of Scott open sets.
- `𝒪.borel`: The Borel measurable space generated by the Scott-topology.
- `cantor_borel_eq_scott_borel`: Theorem relating the Borel sets generated by the Cantor- and the
  Scott-topologies.

-/

namespace ProbNetKAT

set_option grind.warning false

open Topology MeasureTheory

variable {H : Type}

instance 𝒪.scottTopology : TopologicalSpace (Set H) := Topology.scott _ Set.univ
/-- The Borel measurable space generated by the Scott-topology. -/
def 𝒪.borel : MeasurableSpace (Set H) := @_root_.borel _ 𝒪.scottTopology
/-- The set of Scott-open sets. -/
def 𝒪 : Set (Set (Set H)) := 𝒪.scottTopology.IsOpen
instance 𝒪.IsScott : @Topology.IsScott (Set H) Set.univ _ 𝒪.scottTopology := ⟨rfl⟩

/-- The Scott-open sets are a Pi-system, i.e. closed under intersection. -/
theorem 𝒪_IsPiSystem : IsPiSystem (𝒪 (H:=H)) := by
  intro s hs t ht h
  have h₁ : IsOpen[𝒪.scottTopology] s := hs
  have h₂ : IsOpen[𝒪.scottTopology] t := ht
  exact IsOpen.inter h₁ h₂

/-- **Lemma 6.** A subset `B ⊆ 2H` is Scott-open iff there exists `F ⊆ ℘ω(H)` such that
  `B = ⋃ a ∈ F, B{a}`. -/
theorem 𝒪_mem_iff_finite_cover (B : Set (Set H)) :
    B ∈ 𝒪 ↔ ∃ F ⊆ ℘ω Set.univ, B = ⋃ a ∈ F, B{a} := by
  sorry

@[simp]
theorem B_h_is_scott_open {q : H} : B[q] ∈ 𝒪 := by
  apply (@Topology.IsScott.isOpen_iff_isUpperSet_and_dirSupInaccOn _ Set.univ _ 𝒪.scottTopology
    B[q] inferInstance).mpr
  simp
  constructor
  · intro; exact fun ⦃b⦄ a_1 a ↦ a_1 a
  · exact dirSupInacc_iff_forall_sSup.mpr fun ⦃d⦄ a a a ↦ a
@[simp]
theorem B_h_is_scott_measurable : MeasurableSet[𝒪.borel] B[q] :=
  MeasurableSpace.measurableSet_generateFrom B_h_is_scott_open

/-- Every open set is a countable union of basic open sets `B{a}`, `a ∈ ℘ω(H)`. -/
theorem ahsjkdas (B : Set (Set H)) (hB : B ∈ 𝒪) : ∃ A ⊆ ℘ω Set.univ, B = ⋃ a ∈ A, B{a} := by
  sorry

/-- The Borel sets of the two topologies (Cantor and Scott) are the same. -/
theorem cantor_borel_eq_scott_borel : ℬ.borel (H:=H) = 𝒪.borel := by
  ext M
  constructor
  · intro h
    simp_all [← ℬ_is_borel]
    induction h with
    | base s hs =>
      induction hs with
      | basic x hx =>
        simp_all
        rcases hx
        · rename_i h; obtain ⟨q, _, _⟩ := h
          exact B_h_is_scott_measurable
        · rename_i h; obtain ⟨q, _, _⟩ := h
          exact MeasurableSet.compl_iff.mpr B_h_is_scott_measurable
      | univ => simp_all
      | inter => simp_all
      | sUnion => sorry
    | empty => simp
    | compl => simp_all
    | union => simp_all
  · intro h
    induction h with
    | basic s hs =>
      simp_all
      replace hs : s ∈ 𝒪 := hs
      simp_all [𝒪_mem_iff_finite_cover]
      obtain ⟨F, hF, _, _⟩ := hs
      sorry
    | empty => simp
    | compl => simp_all
    | iUnion S hS ih => exact MeasurableSet.iUnion ih

end ProbNetKAT
