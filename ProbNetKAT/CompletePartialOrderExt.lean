import Mathlib.Order.CompletePartialOrder

open Function

abbrev PartialOrder.lift' [PartialOrder Œ≤] (f : Œ± ‚Üí Œ≤) (inj : Injective f) : PartialOrder Œ± :=
  { Preorder.lift f with le_antisymm := fun _ _ h‚ÇÅ h‚ÇÇ ‚Ü¶ inj (h‚ÇÅ.antisymm h‚ÇÇ) }

abbrev CompletePartialOrder.lift' [CompletePartialOrder Œ≤] (f : Œ± ‚Üí Œ≤) (inj : Injective f) : CompletePartialOrder Œ± :=
  { Preorder.lift f with
    le_antisymm := fun _ _ h‚ÇÅ h‚ÇÇ ‚Ü¶ inj (h‚ÇÅ.antisymm h‚ÇÇ)
    sSup ùíü :=
      let r : Œ≤ := sSup (f '' ùíü)
      sorry
    lubOfDirected := sorry
  }


abbrev CompletePartialOrder.lift {Œ± : Type} {Œ≤ : Type} [CompletePartialOrder Œ≤] (f : Œ± ‚Üí Œ≤) (inj : Function.Injective f) :
    CompletePartialOrder Œ± :=
  { PartialOrder.lift f with
    sSup := by sorry
    lubOfDirected := sorry }
